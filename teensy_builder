#!/usr/bin/perl

use strict;
use warnings;

use Config::IniFiles;
use Cwd 'abs_path';
use File::Basename 'basename';
use File::Path 'make_path';
use File::Spec::Functions 'catfile', 'catdir';
use FindBin;
use List::Util 'none';
use Getopt::Long qw(:config bundling_override no_ignore_case auto_help);

my $local;
my @only_files;
my $all_files;
Getopt::Long::GetOptions (
  "help|h" => sub { Getopt::Long::HelpMessage(0) },
  "local|l" => \$local,
  "file|f=s" => \@only_files,
  "all|a" => \$all_files)
  or Getopt::Long::HelpMessage(2);
@only_files = map {abs_path($_)} @only_files;

my %conf;
my $conf = Config::IniFiles->new(-file => 'builder.conf') or die "The builder.conf file does not exist.\n";
my $has_local_conf = 0;
if (-e catfile($FindBin::Bin, 'local.conf')) {
  $has_local_conf = 1;
  $conf = Config::IniFiles->new(-file => catfile($FindBin::Bin, 'local.conf'), -import => $conf);
}
if (-e 'local.conf') {
  $has_local_conf = 1;
  $conf = Config::IniFiles->new(-file => 'local.conf', -import => $conf);
}
die "The local.conf file does not exist.\n" unless $has_local_conf;

my %targets = (
  teensy31 => {
    core => 'mk20dx256',
    rom_size => 262144,
    ram_size => 65536,
    valid_freq => [2, 4, 8, 16, 24, 48, 72, 96],
    cpu => 'cortex-m4',
    base_libs => '-larm_cortexM4l_math -lm',
  },
  teensy30 => {
    core => 'mk20dx128',
    rom_size => 131072,
    ram_size => 16384,
    valid_freq => [24, 48, 96],
    cpu => 'cortex-m4',
    base_libs => '-larm_cortexM4l_math -lm',
  },
  teensylc => {
    core => 'mkl26z64',
    rom_size => 63488,
    ram_size => 8192,
    valid_freq => [24, 48],
    cpu => 'cortex-m0plus',
    base_libs => '-larm_cortexM0l_math -lm',
  },
);
$targets{teensy32} = $targets{teensy31};

my @usb_types = qw(SERIAL HID SERIAL_HID MIDI RAW_HID FLIGHTSIM DISABLED);
my @keyboard_layouts =
  qw(US_ENGLISH CANADIAN_FRENCH CANADIAN_MULTILINGUAL CZECH
     DANISH FINNISH FRENCH FRENCH_BELGIAN FRENCH_SWISS GERMAN
     GERMAN_MAC GERMAN_SWISS ICELANDIC IRISH ITALIAN NORWEGIAN
     PORTUGUESE PORTUGUESE_BRAZILIAN SERBIAN_LATIN_ONLY SPANISH
     SPANISH_LATIN_AMERICA SWEDISH TURKISH UNITED_KINGDOM
     US_INTERNATIONAL);

die "You must specify a target.\n" if not $conf->exists('main', 'target');
die "Invalid target: ".$conf->val('main', 'target')."\n" if not exists $targets{$conf->val('main', 'target')};
my %target = %{$targets{$conf->val('main', 'target')}};
my $usb_type = uc($conf->val('main', 'usbtype', 'SERIAL'));
die "Invalid usb type: ${usb_type}.\n" if not grep { $_ eq $usb_type } @usb_types;
my $keyboard_layout = uc($conf->val('main', 'keyboard', 'US_ENGLISH'));
die "Invalid keyboard layout: ${keyboard_layout}.\n" if not grep { $_ eq $keyboard_layout } @keyboard_layouts;
my $cpu_freq = $conf->val('main', 'cpufreq', 48);
die "Invalid CPU frequency: ${cpu_freq}.\n" if not grep { $_ == $cpu_freq } @{$target{valid_freq}};
my $optimize = $conf->val('main', 'optimize', 's');
die "Invalid optimize option: $optimize.\n" if not $optimize =~ m/[0123sg]|fast/;

my @libs = $conf->Parameters('libs');
die "You must specify the 'teensy_core' library.\n" if not grep { $_ eq 'teensy_core' } @libs;

sub common_flags {
  my $config = sprintf '-DF_CPU=%d000000 -DUSB_%s -DLAYOUT_%s -D__%s__ -mcpu=%s -O%s',
    $cpu_freq, $usb_type, $keyboard_layout, uc($target{core}), $target{cpu}, $optimize;
  my $base = '-DARDUINO_ARCH_AVR -DARDUINO=10605 -DTEENSYDUINO=125 -MMD';
  my $flags = '-Wall -g -ffunction-sections -fdata-sections -nostdlib -Os -mthumb -fsingle-precision-constant';
  my @includes =  ('-I.', map { '-I'.$conf->val('libs', $_) } @libs);
  return $config.' '.$base.' '.$flags.' '.join(' ', @includes);
}

sub c_flags {
  return common_flags().' -std=c11';
}

sub cxx_flags {
  return common_flags().' -std=gnu++17 -felide-constructors -fno-exceptions -fno-rtti';
}

sub ld_flags {
 my $flags = sprintf '-Wl,--gc-sections,--relax,--defsym=__rtc_localtime=%d -mcpu=%s -T %s -O%s',
   time(), $target{cpu}, catfile($conf->val('libs', 'teensy_core'), $target{core}.'.ld'), $optimize;
 return $flags.' --specs=nano.specs -mthumb',
}

my %extensions = (
  c => ['gcc', c_flags()],
  cc => ['g++', cxx_flags()],
  cpp => ['g++', cxx_flags()],
  S => ['gcc', common_flags()],
);

sub compiler {
  my ($name) = @_;
  my $bin =  $conf->val('paths', 'compiler_prefix', 'arm-none-eabi-').$name;
  my $path = catfile($conf->val('paths', 'compiler'), $bin);
  if ($name eq 'ar' and not -e $path) {
    return compiler('gcc-ar');
  }
  return "'${path}' ";
}

sub tool {
  my ($name) = @_;
  return "'".catfile($conf->val('paths', 'tools'), $name)."' ";
}

sub run {
  my ($cmd, $error_msg) = @_;
  print "$cmd\n";
  system $cmd and die $error_msg."\n";
}

# mtime($file_name)
# Returns the time in seconds since the epoch when the given file has been
# modified last. Returns 0 if the file does not exist.
sub mtime {
  my ($file) = @_;
  if (not -f $file or not (my @st = stat(_))) {
    return 0;
  } else {
    return $st[9];
  }
}

# should_build($obj_file_name)
# Takes the relative path to an object file (e.g. src/main.o) and returns true
# if this file should be rebuilt. In particular, the function tries to parse a
# file with the same name of the object file but a '.d' suffix instead of '.o'
# that is expected to contain a fragment of Makefile giving the dependences of
# the object file. Returns 1 if any of the dependences is newer than the object
# file or if the makefile cannot be read.
sub should_build {
  my ($file) = @_;
  my $dest_time = mtime($file);
  return 1 if not $dest_time or $all_files;
  my $dep_file = $file =~ s/\.o$/.d/r;
  return 1 if not -f $dep_file;
  local $/ = undef;
  open my $fh, '<', $dep_file or die "Cannot read the file: $dep_file\n";
  my (undef, @deps) = split(/\s*:?\s+\\?\r?\n?\s*/, <$fh>);
  close $fh;
  for my $f (@deps) { # $dep->targets()) {
    return 1 if $dest_time < mtime($f);
  }
  return 0;
}

# check_size($elf_file_name)
# Checks that the program in the given ELF file can fit in the memory of the
# selected board.
sub check_size {
  my ($elf) = @_;
  my $cmd = compiler('size')." -A $elf";
  print "$cmd\n";
  my %size = map { print; m/^(\S+)\s+(\S+).*$/ } qx/$cmd/;
  my $rom = $size{'.text'} + $size{'.data'};
  my $ram = $size{'.data'} + $size{'.bss'};
  printf "\nUsing %d bytes of ROM (%d%% of %d bytes).\n", $rom, (100 * $rom / $target{rom_size}), $target{rom_size};
  printf "Using %d bytes of RAM (%d%% of %d bytes).\n\n", $ram, (100 * $ram / $target{ram_size}), $target{ram_size};
  return $rom <= $target{rom_size} && $ram <= $target{ram_size};
}

# build()
# Builds the program and upload it to the board, unless --local was specified.
sub build {
  for my $lib (@libs) {
    print "Compiling lib $lib (".$conf->val('libs', $lib).").\n";
    my $indir = $conf->val('libs', $lib);
    my $outdir = catdir('_build/', $lib);
    my $outlib = catfile($outdir, $lib.'.a');
    make_path($outdir);
    for my $ext (keys %extensions) {
      # print "Looking for files with extension: $ext.\n";
      my ($tool, $flags) = @{$extensions{$ext}};
      my $compiler = compiler($tool);
      my @allfiles = glob(catfile($indir, '*.'.$ext));
      for my $f (@allfiles) {
        if (@only_files and none { $_ eq abs_path($f) } @only_files) {
          print "Skipped file: $f\n";
          next;
        }
        my $out = catfile($outdir, basename($f).'.o');
        next if $lib eq 'teensy_core' && basename($f) eq 'main.cpp';
        if (should_build($out)) {
          print "Building: $f\n";
          run("$compiler $flags -o $out -c $f", "Compilation failed.");
          run(compiler('ar')." rcs $outlib $out", "Cannot add '$out' to the library '$outlib'.");
        } else {
          print "Target up-to-date: $out\n";
        }
      }
    }
  }
  return if @only_files;
  
  my $alllibs = join(' ', map {catfile(catdir('_build', $_), $_.'.a')} (reverse @libs));
  my $outname = $conf->val('main', 'name', 'teensy_prog');
  my $elf = catfile('_build', $outname.'.elf');
  my $hex = catfile('_build', $outname.'.hex');
  my $eep = catfile('_build', $outname.'.eep');
  run(compiler('gcc').ld_flags()." $alllibs -o $elf $target{base_libs}", "Cannot build ELF file.");
  check_size($elf) or die "The program cannot fit in the memory of your board!ll\n";
  run(compiler('objcopy')."-O ihex -R .eeprom $elf $hex", "Cannot build HEX file.");
  run(compiler('objcopy')."-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0 $elf $eep", "Cannot build eeprom file.");
  if (not $local) {
    run(tool('teensy_post_compile')."-file=$outname -path=_build -tools='".$conf->val('paths', 'tools')."'", "Error while running teensy_pos_compile.");
    run(tool('teensy_reboot'), "");
  }
}

sub print_path {
  my $compiler = abs_path($conf->val('paths', 'compiler'));
  my $tools = abs_path($conf->val('paths', 'tools'));
  print "export PATH=$compiler:$tools:$ENV{PATH}\n";
}

my %commands = (
  build => \&build,
  path => \&print_path,
);

@ARGV = ('build') unless @ARGV;
my @invalid = grep { not exists $commands{$_} } @ARGV;
Getopt::Long::HelpMessage(-msg => "Invalid command: $invalid[0]", -exitval => 2) if @invalid;

for my $cmd (@ARGV) {
  &{$commands{$cmd}}();
}

__END__

=head1 NAME

teensy_builder - A make like utility to build program for the Teensy boards.

=head1 SYNOPSIS

teensy_builder [options] [command]

Available options:

=over

=item *
--local -- do not upload the program to the board.

=item *
--file file_name -- only compile the file specified with this option (this
option can be repeated).

=item *
--all -- rebuild all the files even if they have not changed. When the --file
option is used, only the files that it specifies are rebuilt.

=item *
--help -- prints this help message.

=back

Available commands:

=over

=item *
build -- this is the default if no other command is specified, it builds
and upload the program to a Teensy board.

=item *
path -- this prints a command that can be used to set the PATH
environment variable so that it contains the compiler and Teensy tools
directory.

=back


